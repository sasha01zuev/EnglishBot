import asyncio

import asyncpg
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import Message

from keyboards.default import menu
from loader import dp, db
from states import Start
from utils.misc import rate_limit


@rate_limit(limit=5)  # Anti-spam
@dp.message_handler(Command("start"))
async def start(message: Message):
    """Introduction for user, adding user to database"""
    first_name = message.from_user.first_name
    full_name = message.from_user.full_name
    user_id = message.from_user.id
    username = message.from_user.username

    try:
        ########################################################################
        #                         DATABASE Query                               #
        await db.add_user(user_id, first_name, full_name, username)  # Adding user to database
        ########################################################################

        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}üòú –Ø –≤–∏–∂—É —Ç—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ!\n\n"
                             "–í–æ—Ç –Ω–µ–±–æ–ª—å—à–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
                             "    1. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥, —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å\n"
                             "    2. –í —Å–ª–æ–≤–∞—Ä—å —É–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã\n"
                             "    3. –ú–æ–∂–Ω–æ —É—á–∏—Ç—å!\n\n"
                             "–ß—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Ü–µ—Å—Å, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:\n"
                             "    - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
                             "    - –ü–æ–ª–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n")
        await asyncio.sleep(5)
        await message.answer("–õ–∞–¥–Ω–æ, –ø–µ—Ä–µ–π–¥–µ–º –∫ –¥–µ–ª—É ...")
        await asyncio.sleep(2)
        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Å–ª–æ–≤–∞—Ä—å.\n"
                             "–î–∞–≤–∞–π —è —Ç–µ–±–µ –ø–æ–º–æ–≥—É!")
        await asyncio.sleep(3)
        await message.answer("‚¨á–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è‚¨á")

        await Start.SetDictionary.set()

    except asyncpg.exceptions.UniqueViolationError:
        """It raised when registered user try to click /start command"""
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=menu)


@dp.message_handler(state=Start.SetDictionary)
async def set_dict_name(message: Message, state: FSMContext):
    """Fetching first user dictionary name"""
    await state.update_data(dict_name=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –ø–µ—Ä–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥.")
    await asyncio.sleep(2)
    await message.answer("–°–ø–µ—Ä–≤–∞ –≤–≤–µ–¥–∏ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º")
    await Start.SetEnglishWord.set()


@dp.message_handler(state=Start.SetEnglishWord)
async def set_english_word(message: Message, state: FSMContext):
    """Fetching first word"""
    await state.update_data(english_word=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–≤–æ–µ–≥–æ —Å–ª–æ–≤–∞")
    await Start.SetRussianWord.set()


@dp.message_handler(state=Start.SetRussianWord)
async def set_russian_word(message: Message, state: FSMContext):
    """ Adding main info about user to database

    Fetching translate for inputted word. Adding first dictionary and first translate to database
    Setting current dictionary. Setting user parameters.
    """
    await state.update_data(russian_word=message.text)

    data = await state.get_data()
    dict_name = data.get("dict_name")
    english_word = data.get("english_word")
    russian_word = data.get("russian_word")
    user_id = message.from_user.id
    user_language = message.from_user.language_code

    ########################################################################
    #                        DATABASE Queries                              #
    await db.add_dictionary(user_id, dict_name)    # Adding first dictionary
    dictionary_id_for_start = await db.select_dictionary_id_for_start(user_id)
    await db.set_current_dictionary(user_id, dictionary_id_for_start)  # Setting current dictionary
    current_dictionary = await db.select_current_dictionary(user_id)
    await db.add_translate(english_word, russian_word, current_dictionary)  # Adding first translate to current dict
    translate = await db.select_last_translate(current_dictionary)
    translate_id = translate[0]
    await db.set_learning_translate(current_dictionary, translate_id)  # Setup translate for learning
    await db.set_user_parameters(user_id, False, user_language)  # Setup user parameters
    ########################################################################

    await message.answer(f"–ò—Ç–∞–∫, –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è: \"{dict_name}\"\n"
                         f"–ü–µ—Ä–µ–≤–æ–¥:\n{english_word} - {russian_word}")
    await asyncio.sleep(1)
    await message.answer("–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º!\n"
                         "–ù–∞–ø–∏—à–∏ /menu —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.", reply_markup=menu)
    await state.finish()
